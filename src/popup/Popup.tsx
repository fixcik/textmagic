import React, { useState, useEffect } from 'react';
import { checkApiKey } from '../services/openaiService';
import { DEFAULT_CONFIG, getConfig, saveConfig } from '../services/configService';
import { notifyService } from '../services/notificationService';
import { AppConfig } from '../types/index';

interface PopupProps {}

const Popup: React.FC<PopupProps> = () => {
  const [config, setConfig] = useState<AppConfig>(DEFAULT_CONFIG);
  const [isChecking, setIsChecking] = useState<boolean>(false);
  const [activeTab, setActiveTab] = useState<'api' | 'prompts'>('api');
  const [expandedPrompt, setExpandedPrompt] = useState<string | null>(null);
  
  useEffect(() => {
    // –ó–∞–≥—Ä—É–∂–∞–µ–º —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—É—é –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é
    const loadConfig = async () => {
      try {
        const savedConfig = await getConfig();
        // –£–±–µ–¥–∏–º—Å—è, —á—Ç–æ –≤—Å–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –ø–æ–ª—è –µ—Å—Ç—å –≤ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
        const configWithDefaults = {
          ...DEFAULT_CONFIG,
          ...savedConfig,
          prompts: {
            ...DEFAULT_CONFIG.prompts,
            ...savedConfig.prompts
          }
        };
        setConfig(configWithDefaults);
      } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏:', error);
        setConfig(DEFAULT_CONFIG);
      }
    };
    
    loadConfig();
  }, []);

  const handleSave = async () => {
    setIsChecking(true);
    
    try {
      const isValid = await checkApiKey(config.openaiApiKey);
      
      if (isValid) {
        // –°–æ—Ö—Ä–∞–Ω—è–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é –≤ —Ö—Ä–∞–Ω–∏–ª–∏—â–µ Chrome
        await saveConfig(config);
        notifyService.success('–ù–∞—Å—Ç—Ä–æ–π–∫–∏ —É—Å–ø–µ—à–Ω–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã!');
      } else {
        notifyService.error('–ù–µ–≤–µ—Ä–Ω—ã–π API –∫–ª—é—á. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø—Ä–æ–≤–µ—Ä—å—Ç–µ –∏ –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.');
      }
    } catch (error) {
      notifyService.error('–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ API –∫–ª—é—á–∞.');
    } finally {
      setIsChecking(false);
    }
  };

  const handleInputChange = (e: React.ChangeEvent<HTMLInputElement | HTMLTextAreaElement>) => {
    const { id, value } = e.target;
    
    if (id === 'apiKey') {
      setConfig(prev => ({ ...prev, openaiApiKey: value }));
    } else if (id.startsWith('prompts.')) {
      // –†–∞–∑–±–∏—Ä–∞–µ–º id –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –≤–ª–æ–∂–µ–Ω–Ω—ã—Ö —Å–≤–æ–π—Å—Ç–≤
      const path = id.split('.');
      if (path.length === 3) { // prompts.enhance.system
        const [_, category, field] = path;
        setConfig(prev => ({
          ...prev,
          prompts: {
            ...prev.prompts,
            [category]: {
              ...prev.prompts[category as keyof typeof prev.prompts],
              [field]: value
            }
          }
        }));
      }
    }
  };

  const togglePrompt = (promptKey: string) => {
    setExpandedPrompt(expandedPrompt === promptKey ? null : promptKey);
  };

  return (
    <div className="popup-container">
      <div className="popup-header">
        <div className="header-icon-wrapper">
          <svg className="magic-wand-icon" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 48 48" fill="none">
            <path d="M24 6L26 13.5L33.5 16L26 18.5L24 26L22 18.5L14.5 16L22 13.5L24 6Z" fill="white"/>
            <path d="M11 33L38 6" stroke="white" strokeWidth="2" strokeLinecap="round"/>
            <path d="M11 33L18 40" stroke="white" strokeWidth="2" strokeLinecap="round"/>
          </svg>
        </div>
        <h1>TextMagic</h1>
      </div>
      
      <div className="tabs">
        <button 
          className={`tab ${activeTab === 'api' ? 'active' : ''}`} 
          onClick={() => setActiveTab('api')}
        >
          API –ö–ª—é—á
        </button>
        <button 
          className={`tab ${activeTab === 'prompts' ? 'active' : ''}`} 
          onClick={() => setActiveTab('prompts')}
        >
          –ü—Ä–æ–º–ø—Ç—ã
        </button>
      </div>
      
      {activeTab === 'api' ? (
        <div className="tab-content">
          <div className="form-group">
            <label htmlFor="apiKey">OpenAI API Key:</label>
            <div className="input-wrapper">
              <input
                type="password"
                id="apiKey"
                value={config.openaiApiKey}
                onChange={handleInputChange}
                placeholder="–í–≤–µ–¥–∏—Ç–µ –≤–∞—à OpenAI API –∫–ª—é—á"
                disabled={isChecking}
              />
            </div>
          </div>
          
          <button className="save-button" onClick={handleSave} disabled={isChecking}>
            {isChecking ? '–ü—Ä–æ–≤–µ—Ä–∫–∞...' : '–°–æ—Ö—Ä–∞–Ω–∏—Ç—å'}
          </button>
          
          <div className="instructions">
            <h2>–ö–∞–∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å:</h2>
            <ol className="steps-list">
              <li>–í–≤–µ–¥–∏—Ç–µ –≤–∞—à OpenAI API –∫–ª—é—á –≤—ã—à–µ –∏ –Ω–∞–∂–º–∏—Ç–µ "–°–æ—Ö—Ä–∞–Ω–∏—Ç—å"</li>
              <li>–í—ã–¥–µ–ª–∏—Ç–µ —Ç–µ–∫—Å—Ç –Ω–∞ –ª—é–±–æ–π –≤–µ–±-—Å—Ç—Ä–∞–Ω–∏—Ü–µ</li>
              <li>–ù–∞–∂–º–∏—Ç–µ –Ω–∞ –ø–æ—è–≤–∏–≤—à—É—é—Å—è –∫–Ω–æ–ø–∫—É "–£–ª—É—á—à–∏—Ç—å" —Å –∏–∫–æ–Ω–∫–æ–π –≤–æ–ª—à–µ–±–Ω–æ–π –ø–∞–ª–æ—á–∫–∏</li>
            </ol>
          </div>
        </div>
      ) : (
        <div className="tab-content">
          <div className="prompts-container">
            <div className="prompt-section">
              <h3 onClick={() => togglePrompt('enhance')}>
                <span className="prompt-icon">‚ú®</span>
                –£–ª—É—á—à–µ–Ω–∏–µ —Ç–µ–∫—Å—Ç–∞ 
                <span className="toggle-icon">{expandedPrompt === 'enhance' ? '‚ñº' : '‚ñ∂'}</span>
              </h3>
              
              {expandedPrompt === 'enhance' && (
                <div className="prompt-inputs">
                  <div className="form-group">
                    <label htmlFor="prompts.enhance.system">–°–∏—Å—Ç–µ–º–Ω—ã–π –ø—Ä–æ–º–ø—Ç:</label>
                    <textarea
                      id="prompts.enhance.system"
                      value={config.prompts.enhance.system}
                      onChange={handleInputChange}
                      rows={4}
                    />
                  </div>
                  <div className="form-group">
                    <label htmlFor="prompts.enhance.user">–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–π –ø—Ä–æ–º–ø—Ç:</label>
                    <textarea
                      id="prompts.enhance.user"
                      value={config.prompts.enhance.user}
                      onChange={handleInputChange}
                      rows={3}
                    />
                    <p className="prompt-hint">–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ {'{text}'} –¥–ª—è –ø–æ–¥—Å—Ç–∞–Ω–æ–≤–∫–∏ –≤—ã–¥–µ–ª–µ–Ω–Ω–æ–≥–æ —Ç–µ–∫—Å—Ç–∞</p>
                  </div>
                </div>
              )}
            </div>
            
            <div className="prompt-section">
              <h3 onClick={() => togglePrompt('translate')}>
                <span className="prompt-icon">üá¨üáß</span>
                –ü–µ—Ä–µ–≤–æ–¥ –Ω–∞ –∞–Ω–≥–ª–∏–π—Å–∫–∏–π
                <span className="toggle-icon">{expandedPrompt === 'translate' ? '‚ñº' : '‚ñ∂'}</span>
              </h3>
              
              {expandedPrompt === 'translate' && (
                <div className="prompt-inputs">
                  <div className="form-group">
                    <label htmlFor="prompts.translate.system">–°–∏—Å—Ç–µ–º–Ω—ã–π –ø—Ä–æ–º–ø—Ç:</label>
                    <textarea
                      id="prompts.translate.system"
                      value={config.prompts.translate.system}
                      onChange={handleInputChange}
                      rows={4}
                    />
                  </div>
                  <div className="form-group">
                    <label htmlFor="prompts.translate.user">–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–π –ø—Ä–æ–º–ø—Ç:</label>
                    <textarea
                      id="prompts.translate.user"
                      value={config.prompts.translate.user}
                      onChange={handleInputChange}
                      rows={3}
                    />
                    <p className="prompt-hint">–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ {'{text}'} –¥–ª—è –ø–æ–¥—Å—Ç–∞–Ω–æ–≤–∫–∏ –≤—ã–¥–µ–ª–µ–Ω–Ω–æ–≥–æ —Ç–µ–∫—Å—Ç–∞</p>
                  </div>
                </div>
              )}
            </div>
            
            <div className="prompt-section">
              <h3 onClick={() => togglePrompt('translateToRussian')}>
                <span className="prompt-icon">üá∑üá∫</span>
                –ü–µ—Ä–µ–≤–æ–¥ –Ω–∞ —Ä—É—Å—Å–∫–∏–π
                <span className="toggle-icon">{expandedPrompt === 'translateToRussian' ? '‚ñº' : '‚ñ∂'}</span>
              </h3>
              
              {expandedPrompt === 'translateToRussian' && (
                <div className="prompt-inputs">
                  <div className="form-group">
                    <label htmlFor="prompts.translateToRussian.system">–°–∏—Å—Ç–µ–º–Ω—ã–π –ø—Ä–æ–º–ø—Ç:</label>
                    <textarea
                      id="prompts.translateToRussian.system"
                      value={config.prompts.translateToRussian.system}
                      onChange={handleInputChange}
                      rows={4}
                    />
                  </div>
                  <div className="form-group">
                    <label htmlFor="prompts.translateToRussian.user">–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–π –ø—Ä–æ–º–ø—Ç:</label>
                    <textarea
                      id="prompts.translateToRussian.user"
                      value={config.prompts.translateToRussian.user}
                      onChange={handleInputChange}
                      rows={3}
                    />
                    <p className="prompt-hint">–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ {'{text}'} –¥–ª—è –ø–æ–¥—Å—Ç–∞–Ω–æ–≤–∫–∏ –≤—ã–¥–µ–ª–µ–Ω–Ω–æ–≥–æ —Ç–µ–∫—Å—Ç–∞</p>
                  </div>
                </div>
              )}
            </div>
          </div>
          <button className="save-button" onClick={handleSave} disabled={isChecking}>
            {isChecking ? '–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ...' : '–°–æ—Ö—Ä–∞–Ω–∏—Ç—å –ø—Ä–æ–º–ø—Ç—ã'}
          </button>
        </div>
      )}
    </div>
  );
};

export default Popup; 